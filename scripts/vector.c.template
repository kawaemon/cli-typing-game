struct {{TYPE}}Vector {{TYPE_LOW}}_vector_new(void) {
    const struct {{TYPE}}Vector result = {
        .pointer = malloc(sizeof({{TYPE_FULL}}) * INITIAL_CAPACITY),
        .length = 0,
        .capacity = INITIAL_CAPACITY,
    };

    assert(result.pointer != NULL, "allocation failed");

    return result;
}

{{TYPE_FULL}} {{TYPE_LOW}}_vector_get(struct {{TYPE}}Vector *self, size_t index) {
    assert(
        index < self->length,
        "attempted to get out of {{TYPE}}Vector bounds(length: %d, requested: %d)",
        self->length, index);

    return self->pointer[index];
}

void {{TYPE_LOW}}_vector_push(struct {{TYPE}}Vector *self, {{TYPE_FULL}} value) {
    assert(self != NULL, "passed NULL to {{TYPE_LOW}}_vector_push");
    assert(self->pointer != NULL, "passed freed or invalid {{TYPE}}Vector");

    if (self->capacity == self->length) {
        const size_t new_size_bytes = self->capacity * 2 * sizeof({{TYPE_FULL}});

        self->pointer = realloc(self->pointer, new_size_bytes);
        self->capacity *= 2;
    }

    self->pointer[self->length] = value;
    self->length += 1;
}

{{TYPE_FULL}} {{TYPE_LOW}}_vector_pop(struct {{TYPE}}Vector *self) {
    assert(self != NULL, "passed NULL to {{TYPE_LOW}}_vector_push(self)");
    assert(self->pointer != NULL, "passed freed or invalid {{TYPE}}Vector");

    {{TYPE_FULL}} result = self->pointer[self->length - 1];

    self->length -= 1;

    return result;
}

void {{TYPE_LOW}}_vector_free(struct {{TYPE}}Vector *self) {
    assert(self != NULL, "passed NULL to {{TYPE_LOW}}_vector_push");
    assert(self->pointer != NULL, "passed freed or invalid {{TYPE}}Vector");

    free(self->pointer);
    self->pointer = NULL;
}
